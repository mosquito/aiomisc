# Copyright (C) 2020, Dmitry Orlov
# This file is distributed under the same license as the aiomisc package.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: aiomisc 12.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-01 00:23+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Tzoiker tzoiker@gmail.com\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/aggregate.rst:2
msgid ""
"Parametric decorator that aggregates multiple"
"(but no more than ``max_count`` defaulting to ``None``) single-argument"
"executions (``res1 = await func(arg1)``, ``res2 = await func(arg2)``, ...)"
"of an asynchronous function with variadic positional arguments"
"(``async def func(*args, pho=1, bo=2) -> Iterable``) into its single execution"
"with multiple positional arguments"
"(``res1, res2, ... = await func(arg1, arg2, ...)``) collected within a time"
"window ``leeway_ms``. It offers a trade-off between latency and throughput."
msgstr ""
"Параметрический декоратор, который агрегирует несколько "
"(но не больше, чем ``max_count``, по умолчанию ``None``) вызовов с одним "
"параметром (``res1 = await func(arg1)``, ``res2 = await func(arg2)``, ...) "
"асинхронной функции с переменными количеством позиционных параметров "
"(``async def func(*args, pho=1, bo=2) -> Iterable``) в единственный вызов "
"с несколькими параметрами "
"(``res1, res2, ... = await func(arg1, arg2, ...)``), собранными в течение "
"окна ``leeway_ms``. Он позволяет пожертвовать задержкой ради увеличения "
"пропускной спсобности."

#: ../../source/aggregate.rst:13
msgid ""
"If ``func`` raises an exception, then, all of the aggregated calls will"
"propagate the same exception. If one of the aggregated calls gets cancelled"
"during the ``func`` execution, then, another will try to execute the ``func``."
msgstr ""
"Если ``func`` бросает исключение, тогда все агрегированные вызовы "
"бросят то же самое исключение. Если один агрегированный вызов будет отменён "
"во время выполнения ``func``, тогда другой попробует выполнить ``func`` "
"вместо него."

#: ../../source/aggregate.rst:17
msgid ""
"This decorator may be useful if the ``func`` executes slow IO-tasks,"
"is frequently called, and using cache is not a good option. As a toy example,"
"assume that ``func`` fetches a record from the database by user ID and it is"
"called during each request to our service. If it takes 100 ms to fetch a "
"record and the load is 1000 RPS, then, with a 10% increase of the delay "
"(to 110 ms), it will decrease the number of requests to the database by "
"10 times (to 100 QPS)."
msgstr ""
"Этот декоратор может быть полезен, если ``func`` выполняет медленные "
"IO-задачи, часто вызывается, а использование кеширования не предпочтительно. "
"В качестве примера, пусть ``func`` запрашивает запись из БД по ID "
"пользователя во время каждого запроса к нашему сервису. Если запрос к БД "
"занимает 100 мс, а нагрузка на сервис составляет 1000 RPS, то с 10% "
"увеличением задержки (до 110 ms) количество запросов к БД упадёт в 10 раз "
"(до 100 QPS) "
